### ekf config file ###
ekf_filter_node:
    ros__parameters:
# The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
# computation until it receives at least one message from one of theinputs. It will then run continuously at the
# frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
        frequency: 30.0

# ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
# set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
# environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
# by, for example, an IMU. Defaults to false if unspecified.
        two_d_mode: true

# Whether to publish the acceleration state. Defaults to false if unspecified.
        publish_acceleration: true

        
# Whether to broadcast the transformation over the /tf topic. Defaultsto true if unspecified.

# 1. Set the map_frame, odom_frame, and base_link frames to the appropriate frame names for your system.
#     1a. If your system does not have a map_frame, just remove it, and make sure "world_frame" is set to the value of odom_frame.
# 2. If you are fusing continuous position data such as wheel encoder odometry, visual odometry, or IMU data, set "world_frame"
#    to your odom_frame value. This is the default behavior for robot_localization's state estimation nodes.
# 3. If you are fusing global absolute position data that is subject to discrete jumps (e.g., GPS or position updates from landmark
#    observations) then:
#     3a. Set your "world_frame" to your map_frame value
#     3b. MAKE SURE something else is generating the odom->base_link transform. Note that this can even be another state estimation node
#         from robot_localization! However, that instance should *not* fuse the global data.
        map_frame: map
        odom_frame: odom             # Defaults to "odom" if unspecified
        base_link_frame: base_link  # Defaults to "base_link" if unspecified
        world_frame:  odom            # Defaults to the value of odom_frame if unspecified

        # odom0_queue_size: 50
        # transform_time_offset: 0.5
        # transform_timeout: 0.5
        

        odom0: /minibot_a_t265/pose/sample  # put the topic here 
        odom0_config: [
                #        true, true, true,
                
                # false,  false,  false,
                       false, false, false,
                       false, false, false,

                       true, true, true,
                       false, false, false,
                       false, false, false]

        # # odom0_queue_size: 2

        # # odom0_linear_velocity_rejection_threshold: 0.8  #

        # # [ADVANCED] If your data is subject to outliers, use these threshold settings, expressed as Mahalanobis distances, to
        # # control how far away from the current vehicle state a sensor measurement is permitted to be. Each defaults to
        # # numeric_limits<double>::max() if unspecified. It is strongly recommended that these parameters be removed if not
        # # required. Data is specified at the level of pose and twist variables, rather than for each variable in isolation.
        # # For messages that have both pose and twist data, the parameter specifies to which part of the message we are applying
        # # the thresholds.
        # # odom0_pose_rejection_threshold: 5.0
        # # odom0_twist_rejection_threshold: 1.0

        imu0: /minibot_a_t265/gyro/sample # put the topic here 
        imu0_config: [false, false, false,
                #       true,  true,  true,
                false, false, false,

                false, false, false,
                # true, true, true,
                      true, true, true,
                      true, true, true]

       
#   # You can specify which values from a sensor are to be used by the filter using the _config parameter. 
  # The order of the values of this parameter is
  # x, y, z,
  # roll, pitch, yaw, 
  # vx, vy, vz,
  # vroll, vpitch, 
  # vyaw, ax, ay, az. 
  # In our example, we set everything in odom0_config to false except the
  # 1st, 2nd, 3rd, and 12th entries, which means the filter will only use the x, y, z,
  # and the vyaw values of odom0.
        # imu0_nodelay: false
        # imu0_differential: false
        # imu0_relative: true
        imu0_queue_size: 2
                # imu0_pose_rejection_threshold: 0.8                 # Note the difference in parameter names
                # imu0_twist_rejection_threshold: 0.8                #
                # imu0_linear_acceleration_rejection_threshold: 0.8  #

# [ADVANCED] Some IMUs automatically remove acceleration due to gravity, and others don't. If yours doesn't, please set
# this to true, and *make sure* your data conforms to REP-103, specifically, that the data is in ENU frame.
        # imu0_remove_gravitational_acceleration: true

# [ADVANCED]  The EKF and UKF models follow a standard predict/correct cycle. During prediction, if there is no
# acceleration reference, the velocity at time t+1 is simply predicted to be the same as the velocity at time t. During
# correction, this predicted value is fused with the measured value to produce the new velocity estimate. This can be
# problematic, as the final velocity will effectively be a weighted average of the old velocity and the new one. When
# this velocity is the integrated into a new pose, the result can be sluggish covergence. This effect is especially
# noticeable with LIDAR data during rotations. To get around it, users can try inflating the process_noise_covariance
# for the velocity variable in question, or decrease the  variance of the variable in question in the measurement
# itself. In addition, users can also take advantage of the control command being issued to the robot at the time we
# make the prediction. If control is used, it will get converted into an acceleration term, which will be used during
# predicition. Note that if an acceleration measurement for the variable in question is available from one of the
# inputs, the control term will be ignored.
# Whether or not we use the control input during predicition. Defaults to false.
        use_control: true
# Whether the input (assumed to be cmd_vel) is a geometry_msgs/Twist or geometry_msgs/TwistStamped message. Defaults to
# false.
        stamped_control: false
# The last issued control command will be used in prediction for this period. Defaults to 0.2.
        control_timeout: 0.2
# Which velocities are being controlled. Order is vx, vy, vz, vroll, vpitch, vyaw.
        control_config: [true, false, false, false, false, true]
# Places limits on how large the acceleration term will be. Should match your robot's kinematics.
        acceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 3.4]
# Acceleration and deceleration limits are not always the same for robots.
        deceleration_limits: [1.3, 0.0, 0.0, 0.0, 0.0, 4.5]
# If your robot cannot instantaneously reach its acceleration limit, the permitted change can be controlled with these
# gains
        acceleration_gains: [0.8, 0.0, 0.0, 0.0, 0.0, 0.9]
# If your robot cannot instantaneously reach its deceleration limit, the permitted change can be controlled with these
# gains
        deceleration_gains: [1.0, 0.0, 0.0, 0.0, 0.0, 1.0]
# [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
# exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
# prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
# However, if users find that a given variable is slow to converge, one approach is to increase the
# process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
# to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
# ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
# unspecified.

# covariance:
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
        process_noise_covariance: [0.01,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.01,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.01,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0001,   0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0001,   0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0001,   0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.01,   0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.01,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.01,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.01,   0.0,    0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.01,   0.0,    0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.01,   0.0,    0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.01,   0.0,    0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.01,   0.0,
                                   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.01]
# [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
# value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
# question. Users should take care not to use large values for variables that will not be measured directly. The values
# are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
#if unspecified.
        initial_estimate_covariance: [1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,   0.0,     0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    1e-9,    0.0,     0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     1e-9,    0.0,     0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     1e-9,    0.0,    0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     1e-9,   0.0,    0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    1e-9,   0.0,
                                      0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,    0.0,     0.0,     0.0,     0.0,    0.0,    1e-9]


#   header:
#   stamp:
#     sec: 1676218346
#     nanosec: 798851072
#   frame_id: minibot_a_t265_gyro_optical_frame
# orientation:
#   x: 0.0
#   y: 0.0
#   z: 0.0
#   w: 0.0
# orientation_covariance:
# - -1.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# angular_velocity:
#   x: 0.0053264847956597805
#   y: -0.003195890923961997
#   z: -0.0010652969358488917
# angular_velocity_covariance:
# - 0.01
# - 0.0
# - 0.0
# - 0.0
# - 0.01
# - 0.0
# - 0.0
# - 0.0
# - 0.01
# linear_acceleration:
#   x: 0.0
#   y: 0.0
#   z: 0.0
# linear_acceleration_covariance:
# - 0.01
# - 0.0
# - 0.0
# - 0.0
# - 0.01
# - 0.0
# - 0.0
# - 0.0
# - 0.01
# ---

# frame_id: minibot_a_t265_gyro_optical_frame
# orientation_covariance:
# - -1.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# - 0.0
# angular_velocity:
#   x: 0.0
#   y: -0.003195890923961997
#   z: -0.007457078900188208
# angular_velocity_covariance:
# - 0.01
# - 0.0
# - 0.0
# - 0.0
# - 0.01
# - 0.0
# - 0.0
# - 0.0
# - 0.01
# linear_acceleration:
#   x: 0.0
#   y: 0.0
#   z: 0.0
# linear_acceleration_covariance:
# - 0.01
# - 0.0
# - 0.0
# - 0.0
# - 0.01
# - 0.0
# - 0.0
# - 0.0
# - 0.01




## ECHO  /POSE/SAMPLE
# header:
#   stamp:
#     sec: 1677086911
#     nanosec: 152624640
#   frame_id: camera_link
# child_frame_id: minibot_a_t265_pose_frame
# pose:
#   pose:
#     position:
#       x: -6.905897316755727e-05
#       y: -0.00018509670917410403
#       z: 0.001153389923274517
#     orientation:
#       x: -0.0232749842107296
#       y: 0.004295854829251766
#       z: -0.0003576548187993467
#       w: 0.9997197985649109
#   covariance:
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
# twist:
#   twist:
#     linear:
#       x: -0.0004280587717334194
#       y: 0.0015620952015069178
#       z: -0.0008009754195846518
#     angular:
#       x: 0.0018924107064180642
#       y: 0.0021489270517058585
#       z: -0.00011209165764534883
#   covariance:
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
# ---
# header:
#   stamp:
#     sec: 1677086911
#     nanosec: 157625856
#   frame_id: camera_link
# child_frame_id: minibot_a_t265_pose_frame
# pose:
#   pose:
#     position:
#       x: -6.554061837960035e-05
#       y: -0.0001802490878617391
#       z: 0.001146127237007022
#     orientation:
#       x: -0.023273266851902008
#       y: 0.004299904685467482
#       z: -0.0003549770044628531
#       w: 0.9997198581695557
#   covariance:
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
# twist:
#   twist:
#     linear:
#       x: 0.00016402476663289077
#       y: 0.0012856430538011633
#       z: -0.0011218171807475046
#     angular:
#       x: -0.0043797311469822055
#       y: -0.0020143764076173344
#       z: -4.6175904635302436e-05
#   covariance:
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.1
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.0
#   - 0.001
